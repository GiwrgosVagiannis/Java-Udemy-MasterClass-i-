//////////////////////////////////////////////////////////////////////////////////////
/////////                           MAIN                                    /////////
//////////////////////////////////////////////////////////////////////////////////////
package com.company;

public class Main {
    public Main() {
    }

    public static void main(String[] args) {
        SearchTree tree = new SearchTree((ListItem)null);
        tree.traverse(tree.getRoot());
        String stringData = "5 7 3 9 8 2 1 0 4 6";
        String[] data = stringData.split(" ");
        String[] var4 = data;
        int var5 = data.length;

        for(int var6 = 0; var6 < var5; ++var6) {
            String s = var4[var6];
            tree.addItem(new Node(s));
        }

        tree.traverse(tree.getRoot());
        tree.removeItem(new Node("3"));
        tree.traverse(tree.getRoot());
        tree.removeItem(new Node("5"));
        tree.traverse(tree.getRoot());
        tree.removeItem(new Node("0"));
        tree.removeItem(new Node("4"));
        tree.removeItem(new Node("2"));
        tree.traverse(tree.getRoot());
        tree.removeItem(new Node("9"));
        tree.traverse(tree.getRoot());
        tree.removeItem(new Node("8"));
        tree.traverse(tree.getRoot());
        tree.removeItem(new Node("6"));
        tree.traverse(tree.getRoot());
        tree.removeItem(tree.getRoot());
        tree.traverse(tree.getRoot());
        tree.removeItem(tree.getRoot());
        tree.traverse(tree.getRoot());
    }
}
///////////////////////////////////////////////////////////////////////////////
///////////                  MyLinkedList Class              //////////////
///////////////////////////////////////////////////////////////////////////////
package com.company;

public class MyLinkedList implements NodeList {
    private ListItem root = null;

    public MyLinkedList(ListItem root) {
        this.root = root;
    }

    public ListItem getRoot() {
        return this.root;
    }

    public boolean addItem(ListItem newItem) {
        if (this.root == null) {
            this.root = newItem;
            return true;
        } else {
            for(ListItem currentItem = this.root; currentItem != null; currentItem = currentItem.next()) {
                int comparison = currentItem.compareTo(newItem);
                if (comparison >= 0) {
                    if (comparison > 0) {
                        if (currentItem.previous() != null) {
                            currentItem.previous().setNext(newItem).setPrevious(currentItem.previous());
                            newItem.setNext(currentItem).setPrevious(newItem);
                        } else {
                            newItem.setNext(this.root).setPrevious(newItem);
                            this.root = newItem;
                        }

                        return true;
                    }

                    System.out.println(newItem.getValue() + " is already present, not added.");
                    return false;
                }

                if (currentItem.next() == null) {
                    currentItem.setNext(newItem).setPrevious(currentItem);
                    return true;
                }
            }

            return false;
        }
    }

    public boolean removeItem(ListItem item) {
        if (item != null) {
            System.out.println("Deleting item " + item.getValue());
        }

        for(ListItem currentItem = this.root; currentItem != null; currentItem = currentItem.next()) {
            int comparison = currentItem.compareTo(item);
            if (comparison == 0) {
                if (currentItem == this.root) {
                    this.root = currentItem.next();
                } else {
                    currentItem.previous().setNext(currentItem.next());
                    if (currentItem.next() != null) {
                        currentItem.next().setPrevious(currentItem.previous());
                    }
                }

                return true;
            }

            if (comparison >= 0) {
                return false;
            }
        }

        return false;
    }

    public void traverse(ListItem root) {
        if (root == null) {
            System.out.println("The list is empty");
        } else {
            while(root != null) {
                System.out.println(root.getValue());
                root = root.next();
            }
        }

    }
}
////////////////////////////////////////////////////////////
//////////////       Node //////////////////////////////////
////////////////////////////////////////////////////////////
package com.company;

public class Node extends ListItem {
    public Node(Object value) {
        super(value);
    }

    ListItem next() {
        return this.rightLink;
    }

    ListItem setNext(ListItem item) {
        this.rightLink = item;
        return this.rightLink;
    }

    ListItem previous() {
        return this.leftLink;
    }

    ListItem setPrevious(ListItem item) {
        this.leftLink = item;
        return this.leftLink;
    }

    int compareTo(ListItem item) {
        return item != null ? ((String)super.getValue()).compareTo((String)item.getValue()) : -1;
    }
}
/////////////////////////////////////////////////////////////////////////////////////////
////////////// ListItem Abstract Class                          /////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
//

package com.company;

public abstract class ListItem {
    protected ListItem rightLink = null;
    protected ListItem leftLink = null;
    protected Object value;

    public ListItem(Object value) {
        this.value = value;
    }

    abstract ListItem next();

    abstract ListItem setNext(ListItem var1);

    abstract ListItem previous();

    abstract ListItem setPrevious(ListItem var1);

    abstract int compareTo(ListItem var1);

    public Object getValue() {
        return this.value;
    }

    public void setValue(Object value) {
        this.value = value;
    }
}
//////////////////////////////////////////////////////////////////////////
//////////////////// INTERFACE                         //////////////////
//////////////////////////////////////////////////////////////////////////



package com.company;

public interface NodeList {
    ListItem getRoot();

    boolean addItem(ListItem var1);

    boolean removeItem(ListItem var1);

    void traverse(ListItem var1);
}

////////////////////////////////////////////////////////////////////////////////
//////////                  SearchTree                                  ///////
////////////////////////////////////////////////////////////////////////////////
//


package com.company;

public class SearchTree implements NodeList {
    private ListItem root = null;

    public SearchTree(ListItem root) {
        this.root = root;
    }

    public ListItem getRoot() {
        return this.root;
    }

    public boolean addItem(ListItem newItem) {
        if (this.root == null) {
            this.root = newItem;
            return true;
        } else {
            ListItem currentItem = this.root;

            while(currentItem != null) {
                int comparison = currentItem.compareTo(newItem);
                if (comparison < 0) {
                    if (currentItem.next() == null) {
                        currentItem.setNext(newItem);
                        return true;
                    }

                    currentItem = currentItem.next();
                } else {
                    if (comparison <= 0) {
                        System.out.println(newItem.getValue() + " is already present");
                        return false;
                    }

                    if (currentItem.previous() == null) {
                        currentItem.setPrevious(newItem);
                        return true;
                    }

                    currentItem = currentItem.previous();
                }
            }

            return false;
        }
    }

    public boolean removeItem(ListItem item) {
        if (item != null) {
            System.out.println("Deleting item " + item.getValue());
        }

        ListItem currentItem = this.root;
        ListItem parentItem = currentItem;

        while(currentItem != null) {
            int comparison = currentItem.compareTo(item);
            if (comparison < 0) {
                parentItem = currentItem;
                currentItem = currentItem.next();
            } else {
                if (comparison <= 0) {
                    this.performRemoval(currentItem, parentItem);
                    return true;
                }

                parentItem = currentItem;
                currentItem = currentItem.previous();
            }
        }

        return false;
    }

    private void performRemoval(ListItem item, ListItem parent) {
        if (item.next() == null) {
            if (parent.next() == item) {
                parent.setNext(item.previous());
            } else if (parent.previous() == item) {
                parent.setPrevious(item.previous());
            } else {
                this.root = item.previous();
            }
        } else if (item.previous() == null) {
            if (parent.next() == item) {
                parent.setNext(item.next());
            } else if (parent.previous() == item) {
                parent.setPrevious(item.next());
            } else {
                this.root = item.next();
            }
        } else {
            ListItem current = item.next();

            ListItem leftmostParent;
            for(leftmostParent = item; current.previous() != null; current = current.previous()) {
                leftmostParent = current;
            }

            item.setValue(current.getValue());
            if (leftmostParent == item) {
                item.setNext(current.next());
            } else {
                leftmostParent.setPrevious(current.next());
            }
        }

    }

    public void traverse(ListItem root) {
        if (root != null) {
            this.traverse(root.previous());
            System.out.println(root.getValue());
            this.traverse(root.next());
        }

    }
}


