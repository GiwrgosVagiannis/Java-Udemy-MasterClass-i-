///////////////////////////////////////////////////////////////////////////////////////
////                                    MAIN                                      /////    
///////////////////////////////////////////////////////////////////////////////////////
package com.company;

import java.util.*;

public class Main {
private static ArrayList<Album> Albums =new ArrayList<Album>();
    public static void main(String[] args) {
Album album = new Album ("Gonidis Best Of","Gonidis");
album.addSong("Diomisi",3);
album.addSong("Fwtografe",2.5);
album.addSong("ENASTRELOS",1.8);
Albums.add(album);
Album album1=new Album("The Eminem Show","Eminem");
album1.addSong("White America",3.1);
album1.addSong("Business",3.5);
album1.addSong("Superman",5);
album1.addSong("Till i Collapse",7);
album1.addSong("Without me",4);
Albums.add(album1);
        LinkedList<Song> playList=new LinkedList<Song>();


        Albums.get(1).addToPlayList("Business",playList);
        Albums.get(1).addToPlayList("White America",playList);
        Albums.get(1).addToPlayList("Till i Collapse",playList);
        Albums.get(0).addToPlayList(2,playList);
        Albums.get(1).addToPlayList(1,playList);
        play(playList);

    }
    private static void play(LinkedList<Song> playList){
        Scanner scanner=new Scanner(System.in);
        boolean quit=false;
        boolean forward=true;

        ListIterator<Song> listIterator= playList.listIterator();
        if(playList.size()==0){
            System.out.println("No Songs in the PlayList");
            }else{
            System.out.println("Now Playling" + listIterator.next().toString());
            printMenu();
            while(!quit){

                int action=scanner.nextInt();
                scanner.nextLine();
                switch(action){
                    case 0:
                        System.out.println("PlayList Complete");
                        quit=true;
                        break;
                    case 1:
                        if(!forward){
                            if(listIterator.hasNext()){
                                listIterator.next();
                            }
                            forward=true;
                        }
                        if(listIterator.hasNext()){
                            System.out.println("Now Playing " + listIterator.next().toString());
                        }else{
                            System.out.println("we have reached the end of the playlist.");
                            forward=false;
                        }
                        break;
                    case 2:
                        if(forward){
                            if(listIterator.hasPrevious()){
                                listIterator.previous();
                            }}
                            forward=false;
                            if(listIterator.hasPrevious()) {
                                System.out.println("Now Playing " + listIterator.previous().toString());
                            }else{
                                System.out.println("we are at the start of the playlist");
                                forward=true;
                            }

                        break;
                    case 3:
                        break;
                    case 4:
                        printList(playList);
                        break;
                    case 5:
                        printMenu();
                        break;

                }

            }

            }
        }
    private static void printMenu(){
        System.out.println("Available Actions :");
        System.out.println("0 - to quit");
        System.out.println("1 - to play Songs");
        System.out.println("2 - to play previous Songs");
        System.out.println("3 - to replay the current Song");
        System.out.println("4 - List Song ");
        System.out.println("print available actions. ");

    }
    private static void printList(LinkedList<Song> linkedList){
        Iterator<Song> iterator= linkedList.iterator();
        System.out.println("=======================");
        while(iterator.hasNext()){
            System.out.println(iterator.next());

        }
        System.out.println("=======================");
    }
    }

//////////////////////////////////////////////////////////////////////
//////                      SONG                                /////
//////////////////////////////////////////////////////////////////////
package com.company;

public class Song {
    private String title;
    private double duration;

    public Song(String title, double duration) {
        this.title = title;
        this.duration = duration;
    }
    public Song(){
        this("Untitled Song ",0);
    }

    public String getTitle() {
        return title;
    }

    public double getDuration() {
        return duration;
    }

    @Override
    public String toString() {
        return "Song{" +
                "title='" + title + '\'' +
                ", duration=" + duration +
                '}';
    }
}
/////////////////////////////////////////////////////
/////               ALBUM                       ////
/////////////////////////////////////////////////////
package com.company;

import java.util.ArrayList;
import java.util.LinkedList;

public class Album {
    private String name;
    private String artist;
    private ArrayList<Song> songs;

    public Album(String name, String artist) {
        this.name = name;
        this.artist = artist;
        this.songs = new ArrayList<Song>();
    }

    public boolean addSong(String title, double duration) {
        if (findSong(title) == null) {
            this.songs.add(new Song(title, duration));
            return true;
        }
        return false;
    }

    public Song findSong(String title) {

        for(Song checkedSong:this.songs){

            if(checkedSong.getTitle().equals(title)){

                return checkedSong;

            }

        }
        return null;
    }
public boolean addToPlayList(int trackNumber, LinkedList<Song> playList){
int index= trackNumber-1;
if((index>= 0)  && (index <=this.songs.size())){
            playList.add(this.songs.get(index));
            return true;
}
return false;
}
public boolean addToPlayList(String title,LinkedList<Song> playList){
        Song CheckedSong=findSong(title);
        if(CheckedSong!=null){
            playList.add(CheckedSong);
            return true;
            }else
                System.out.println("No Song Found");
                return false;
        }
}







